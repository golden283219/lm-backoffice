<?php

namespace api\modules\v1\controllers;

use backend\models\PremPaymentsHistory;
use backend\models\PremPlans;
use backend\models\PremUsers;
use common\models\site\PremSignupForm;
use console\jobs\SendEmail;
use Exception;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\HttpException;

class PremiumController extends Controller
{
    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

	public function actionPaypalIpnCreateProfile(){
		$request = Yii::$app->request;
		$post = $request->post();

		$email = $post['email'];
		$package = $post['plan_id'];
		$key = $post['key'];

		if( $key === false || $key != 'lookmovie') {
			Yii::$app->response->statusCode = 422;

			return [
				'field' => 'key',
				'message' => 'Wrong key',
			];
		}

		// Find plan
        $premPlan = PremPlans::find()->where(['id' => $package])->one();
        if ($premPlan === null) {
			Yii::$app->response->statusCode = 404;

			return [
				'field' => 'plan_id',
				'message' => 'Plan not exists',
			];
        }

		// Check if user already exist
		$userModel = PremUsers::find()->where([
			'email' => $email
		])->one();

		if (empty($userModel)) {
			$userModel = $this->create_new_user($email);

			if($userModel){
				$email = new SendEmail([
					'toEmail'   => $userModel->email,
					'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
					'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
					'subject'   => 'Lookmovie Premium Account Credentials',
					'template'  => 'AccountCreated',
					'fields'    => [
						'userEmail' => $userModel->email,
						'password'  => $userModel->plain_password,
						'auth_key'  => $userModel->auth_key
					]
				]);

				// $email->execute();

				Yii::$app->emailSendQueue->push($email);
			}
		}

		// 
		$userModel->latest_transaction_date = date("Y-m-d H:i:s");

		// Add Payment History
		$payment_history = new PremPaymentsHistory();
		$payment_history->guid = $this->GUIDv4();
		$payment_history->paid_at = time();
		$payment_history->created_at = time();
		$payment_history->payment_status = PremPaymentsHistory::HISTORY_STATUS_PAID;
		$payment_history->order_email = $email;
		$payment_history->title = $premPlan->title . ' Premium on Lookmovie';
		$payment_history->paid_usd = $premPlan->price_usd * $premPlan->month_count;
		$payment_history->id_prem_plan = $premPlan->id;
		$payment_history->id_prem_user = $userModel->id;
		$payment_history->payment_method = PremPaymentsHistory::PAYMENT_METHOD_PAYPAL;

		$payment_history->save();

		// Update Cancel Time
		$this->update_prem_status($userModel, $premPlan);

		Yii::$app->emailSendQueue->push(new SendEmail([
			'toEmail'   => $userModel->email,
			'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
			'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
			'subject'   => 'Lookmovie ' . $premPlan->title . ' Premium Package Activated',
			'template'  => 'PremiumPackageActivated',
			'fields'    => [
				'userEmail' => $userModel->email,
				'package_name'  => 'Premium ' . $premPlan->title . ' Package'
			]
		]));

		return true;
	}

	private function GUIDv4($trim = true)
	{
		if (function_exists('com_create_guid') === true) {
			if ($trim === true)
				return trim(com_create_guid(), '{}');
			else
				return com_create_guid();
		}

		if (function_exists('openssl_random_pseudo_bytes') === true) {
			$data = openssl_random_pseudo_bytes(16);
			$data[6] = chr(ord($data[6]) & 0x0f | 0x40);    // set version to 0100
			$data[8] = chr(ord($data[8]) & 0x3f | 0x80);    // set bits 6-7 to 10
			return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
		}

		// Fallback (PHP 4.2+)
		mt_srand((float)microtime() * 10000);
		$charid = strtolower(md5(uniqid(rand(), true)));
		$hyphen = chr(45);                  // "-"
		$lbrace = $trim ? "" : chr(123);    // "{"
		$rbrace = $trim ? "" : chr(125);    // "}"
		$guidv4 = $lbrace .
			substr($charid,  0,  8) . $hyphen .
			substr($charid,  8,  4) . $hyphen .
			substr($charid, 12,  4) . $hyphen .
			substr($charid, 16,  4) . $hyphen .
			substr($charid, 20, 12) .
			$rbrace;
		return $guidv4;
	}


    /**
     * Payment Notification From https://3d.snappypayment.com
     */
    public function actionSnappyPaymentsIpn()
    {
        $postIpnData = Yii::$app->request->post();

        if(!empty($postIpnData)) {
            $ourPost = ArrayHelper::getValue($postIpnData, 'yourPost');

            if (ArrayHelper::getValue($postIpnData, 'result.state') == 100) {
                $user_model = PremUsers::find()->where(['email' => $ourPost['email']])->one();

                // Try To Find Payment History
                $payment_history = PremPaymentsHistory::find()->where(['id' => $ourPost['orderId']])->one();

                if (empty($payment_history)) {
                    throw new HttpException(500, 'Unable to do payment.' . PHP_EOL . json_encode($postIpnData, JSON_PRETTY_PRINT));
                }

                if (isset($payment_history) && in_array($payment_history->payment_status, [PremPaymentsHistory::HISTORY_STATUS_PAID, PremPaymentsHistory::HISTORY_STATUS_REFUNDED])) {
                    return 'OK';
                }
                
                if (empty($user_model)) {
                    $user_model = $this->create_new_user($ourPost['email']);

                    Yii::$app->emailSendQueue->push(new SendEmail([
                        'toEmail'   => $user_model->email,
                        'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
                        'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
                        'subject'   => 'Lookmovie Premium Account Credentials',
                        'template'  => 'AccountCreated',
                        'fields'    => [
                            'userEmail' => $user_model->email,
                            'password'  => $user_model->plain_password,
                            'auth_key'  => $user_model->auth_key
                        ]
                    ]));
                }

                $user_model->latest_transaction_date = date("Y-m-d H:i:s");

                $payment_history->guid = $ourPost['PaymentGuid'];
                $payment_history->paid_at = time();
                $payment_history->order_payload = json_encode($postIpnData);
                $payment_history->id_prem_user = $user_model->id;
                $payment_history->payment_method = PremPaymentsHistory::PAYMENT_METHOD_CC;
                $payment_history->id_prem_user = $user_model->id;
                $payment_history->payment_status = PremPaymentsHistory::HISTORY_STATUS_PAID;
                $payment_history->save();

                $prem_plan = PremPlans::find()->where(['id' => $payment_history->id_prem_plan])->one();

                $this->update_prem_status($user_model, $prem_plan);

                Yii::$app->emailSendQueue->push(new SendEmail([
                    'toEmail'   => $user_model->email,
                    'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
                    'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
                    'subject'   => 'Lookmovie ' . $prem_plan->title . ' Premium Package Activated',
                    'template'  => 'PremiumPackageActivated',
                    'fields'    => [
                        'userEmail' => $user_model->email,
                        'package_name'  => 'Premium ' . $prem_plan->title . ' Package'
                    ]
                ]));
            }
        }

        return 'OK';
    }

    /**
     * @deprecated
     * Swiftext.com Successful Payment Post back URL
     * @return string
     */
    public function actionA917l5ocathy9g8i457ncxd6iggz00tj7dv87038()
    {
        $post = Yii::$app->request->post();

        if (!isset($post['email']) || !isset($post['package']) || !isset($post['payment_id']) || !isset($post['paid_at'])) {
            return 'Err. This Fields is required: email, package, paymant_id, paid_at';
        }

        $user_model = PremUsers::find()->where(['email' => $post['email']])->one();
        $prem_plan = PremPlans::find()->where(['code' => $post['package']])->one();

        if ($prem_plan === null) {
            return 'Err. Prem Plan not Exists.';
        }

        if ($user_model === null) {
            $user_model = $this->create_new_user($post['email']);
        }

        // Try To Find Payment History
        $payment_history = PremPaymentsHistory::find()->where(['guid' => $post['payment_id']])->one();

        if (isset($payment_history) && in_array($payment_history->payment_status, [
            PremPaymentsHistory::HISTORY_STATUS_PAID,
            PremPaymentsHistory::HISTORY_STATUS_REFUNDED
            ])
        ) {
            return 'OK';
        }

        $user_model->latest_transaction_date = date("Y-m-d H:i:s");

        if ($payment_history === null) {
            $payment_history = new PremPaymentsHistory();
            $payment_history->guid = $post['payment_id'];
            $payment_history->paid_at = time();
            $payment_history->created_at = time();
            $payment_history->payment_status = PremPaymentsHistory::HISTORY_STATUS_PAID;
            $payment_history->order_email = $post['email'];
            $payment_history->title = $prem_plan->title . ' Premium on Lookmovie';
            $payment_history->paid_usd = $prem_plan->price_usd * $prem_plan->month_count;
            $payment_history->id_prem_plan = $prem_plan->id;
            $payment_history->id_prem_user = $user_model->id;
            $payment_history->payment_method = PremPaymentsHistory::PAYMENT_METHOD_PAYPAL;

            $payment_history->save();
        }

        $this->update_prem_status($user_model, $prem_plan);

        Yii::$app->emailSendQueue->push(new SendEmail([
            'toEmail'   => $user_model->email,
            'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
            'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
            'subject'   => 'Lookmovie ' . $prem_plan->title . ' Premium Package Activated',
            'template'  => 'PremiumPackageActivated',
            'fields'    => [
                'userEmail' => $user_model->email,
                'package_name'  => 'Premium ' . $prem_plan->title . ' Package'
            ]
        ]));

        return 'OK';
    }

    /**
     * @deprecated
     * Create Account
     * @return string
     * @throws \yii\base\Exception
     */
    public function actionC0fea15fe4f0002948d201742d51d13d(): string
    {
        $req = \Yii::$app->request;

        if (!($email = $req->post('email')) ||
            !($password = $req->post('password')) ||
            !($ts = $req->post('ts')) ||
            !($hash = $req->post('hash'))
        ) {
            throw new BadRequestHttpException('Bad Request Exeption');
        }

        $user_model = $this->create_or_first_user($email, $password);

        if (empty ($user_model)) {
            return 'Error creating new user.' . PHP_EOL . json_encode($req->post, JSON_PRETTY_PRINT) . PHP_EOL;
        }

        Yii::$app->emailSendQueue->push(new SendEmail([
            'toEmail'   => $user_model->email,
            'fromEmail' => [env('APP_DONT_REPLY_EMAIL') => env('APP_DONT_REPLY_FROM')],
            'replyTo'   => [env('APP_PREM_SUPPORT_EMAIL') => env('APP_PREM_SUPPORT_FROM')],
            'subject'   => 'Lookmovie Premium Account Credentials',
            'template'  => 'AccountCreated',
            'fields'    => [
                'userEmail' => $user_model->email,
                'password'  => $user_model->plain_password,
                'auth_key'  => $user_model->auth_key
            ]
        ]));

        return 'OK';
    }

    /**
     * @param $email
     * @param $password
     * @return UserModel|array|null|\yii\db\ActiveRecord
     * @throws \yii\base\Exception
     */
    private function create_or_first_user($email, $password)
    {
        if ($user = PremUsers::find()->where(['email' => $email])->one()) {
            return $user;
        }

        $signupModel = new PremSignupForm();

        $signupModel->email = $email;
        $signupModel->password = $password;

        if ($signupModel->validate() && $signupModel->signup()) {
            return $signupModel->getUser();
        }

        return null;
    }

    /**
     * @deprecated
     * Postback URL that revokes user package
     *
     * @return string
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function actionA92ebc5022213a5a1fb47b5d0b241ec90(): string
    {
        $post = \Yii::$app->request->post();

        if (!isset($post['email']) || !isset($post['package']) || !isset($post['payment_id'])) {
            return 'Err. This Fields is required: email, package, payment_id';
        }


        if (!($user_model = PremUsers::find()->where(['email' => $post['email']])->one()) ||
            !($prem_plan = PremPlans::find()->where(['code' => $post['package']])->one())
        ) {
            return 'Err. Prem Plan Or User Not Exists.';
        }


        if (($payment_history = PremPaymentsHistory::find()->where(['guid' => $post['payment_id']])->one())) {
            if ($payment_history->payment_status === PremPaymentsHistory::HISTORY_STATUS_REFUNDED) {
                return 'OK';
            }

            $payment_history->payment_status = PremPaymentsHistory::HISTORY_STATUS_REFUNDED;
            $payment_history->save();
        }

        return $user_model->revokePackage($prem_plan) ? 'OK' : 'ERR. Unable To Revoke Package.';
    }

    private function create_new_user($email)
    {
        $signupModel = new PremSignupForm();

        $signupModel->email = $email;
        $signupModel->password = random_str(8);

        if ($signupModel->validate() && $signupModel->signup()) {
            return $signupModel->getUser();
        }

        return null;
    }

    /**
     * Update Premium Status For Given User Model with Selected Prem Plan
     * @param $user_model
     * @param $prem_plan
     * @return bool
     */
    private function update_prem_status($user_model, $prem_plan)
    {
        if ($user_model->cancel_timestamp === 0 || $user_model->cancel_timestamp < time()) {
            $user_model->cancel_timestamp = time() + $prem_plan->extra_time;
        } else {
            $user_model->cancel_timestamp += $prem_plan->extra_time;
        }

        if ($user_model->validate() && $user_model->save()) {
            return true;
        }

        return false;
    }
}
