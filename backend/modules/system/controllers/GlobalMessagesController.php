<?php

namespace backend\modules\system\controllers;

use Yii;
use backend\modules\system\models\GlobalMessages;
use backend\modules\system\models\GlobalMessagesSearch;
use yii\web\Controller;
use common\traits\FormAjaxValidationTrait;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * GlobalMessagesController implements the CRUD actions for GlobalMessages model.
 */
class GlobalMessagesController extends Controller
{
    use FormAjaxValidationTrait;

    public $layout = '/common.php';

    private static $disabledCsrfActions = [
        'bulk-delete',
        'bulk-enable',
        'bulk-disable'
    ];


    /** @inheritdoc */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (in_array($action->id, $this::$disabledCsrfActions)) {
            $this->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionBulkDelete()
    {
        $post = Yii::$app->request->post();

        $condition = 'id =' . implode(' OR id = ', $post['ids']);

        GlobalMessages::deleteAll($condition);

        return 'Bulk Delete Successful';
    }

    public function actionBulkEnable()
    {
        $post = Yii::$app->request->post();

        $condition = 'id =' . implode(' OR id = ', $post['ids']);

        GlobalMessages::updateAll(['is_active' => 1], $condition);

        return 'Bulk Enable Successful';
    }

    public function actionBulkDisable()
    {
        $post = Yii::$app->request->post();

        $condition = 'id =' . implode(' OR id = ', $post['ids']);

        GlobalMessages::updateAll(['is_active' => 0], $condition);

        return 'Bulk Disable Successful';
    }

    /**
     * Lists all GlobalMessages models.
     * @return mixed
     */
    public function actionIndex()
    {
        $model = new GlobalMessages();
        $searchModel = new GlobalMessagesSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $this->performAjaxValidation($model);

        $post_fields = Yii::$app->request->post();

        if ($model->load($post_fields)) {
            if ($model->save()) {
                \Yii::$app->getSession()->setFlash('success', 'New Message Have Been Added.');
                return $this->redirect(['index']);
            }
        } else {
            return $this->render('index', [
                'model' => $model,
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        }
    }

    /**
     * Displays a single GlobalMessages model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new GlobalMessages model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new GlobalMessages();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }
        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing GlobalMessages model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }
        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing GlobalMessages model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the GlobalMessages model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return GlobalMessages the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = GlobalMessages::findOne($id)) !== null) {
            return $model;
        }
        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
